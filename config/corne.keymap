#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define BOTH 3

/ {
    combos {
        compatible = "zmk,combos";

        combo_both {
            timeout-ms = <50>;
            key-positions = <37 40>;
            layers = <RAISE LOWER BASE>;
            bindings = <&mo BOTH>;
        };
    };

    macros {
        brightnessinc: brightnessinc {
            compatible = "zmk,behavior-macro";
            label = "BRIGHTNESSINC";
            #binding-cells = <0>;
            bindings = <&kp LC(LSHFT) &kp PG_UP>;
        };
        brightnessdec: brightnessdec {
            compatible = "zmk,behavior-macro";
            label = "BRIGHTNESSDEC";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_SHIFT) &kp PAGE_DOWN>;
        };
        brightness100: brightness100 {
            compatible = "zmk,behavior-macro";
            label = "BRIGHTNESS100";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_SHIFT) &kp LA(PG_UP)>;
        };
        brightness20: brightness20 {
            compatible = "zmk,behavior-macro";
            label = "BRIGHTNESS20";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_SHIFT) &kp LA(PAGE_DOWN)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_layer {
            bindings = <
    &kp LEFT_GUI  &kp Q  &kp W           &kp E      &kp R      &kp T         &kp Y      &kp U          &kp I       &kp O  &kp ESCAPE     &kp BACKSPACE
         &kp TAB  &kp A  &kp S           &kp D      &kp F      &kp G         &kp H      &kp J          &kp K       &kp L       &kp P     &kp SEMICOLON
&kp LEFT_CONTROL  &kp Z  &kp X           &kp C      &kp V      &kp B         &kp N      &kp M      &kp COMMA  &kp PERIOD   &kp SLASH  &kp SINGLE_QUOTE
                                &kp LEFT_SHIFT  &mo LOWER  &kp SPACE    &kp RETURN  &mo RAISE  &kp RIGHT_ALT
            >;
        };

        Lower_layer {
            bindings = <
      &trans       &kp TILDE  &kp EXCLAMATION           &kp AT_SIGN               &kp HASH  &kp PERIOD       &kp MINUS  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9     &kp BACKSLASH      &kp BACKSPACE
&kp LEFT_ALT  &kp UNDERSCORE       &kp DOLLAR           &kp PERCENT              &kp CARET   &kp EQUAL        &kp PLUS  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6    &kp LEFT_BRACE    &kp RIGHT_BRACE
      &trans        &kp PIPE    &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp SLASH    &kp ASTERISK  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                                                             &trans                 &trans  &kp RETURN      &kp RETURN           &trans  &kp KP_NUMBER_0
            >;
        };

        Raise_layer {
            bindings = <
 &trans         &none    &kp C_PLAY_PAUSE        &kp K_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP         &none  &kp K_CONTEXT_MENU         &kp UP  &brightnessdec  &brightnessinc  &brightness100
&kp TAB         &none     &kp PRINTSCREEN          &kp HOME       &kp END        &kp PG_UP     &kp GRAVE            &kp LEFT       &kp DOWN       &kp RIGHT           &none   &brightness20
 &trans  &kp C_REWIND  &kp C_FAST_FORWARD  &kp C_PLAY_PAUSE    &kp DELETE    &kp PAGE_DOWN         &none               &none  &kp C_AL_CALC           &none           &none           &none
                                                     &trans        &trans        &kp SPACE    &kp RETURN              &trans  &kp RIGHT_ALT
            >;
        };

        both_layer {
            bindings = <
&none       &none  &none  &none  &none  &none    &none         &none         &none         &none         &none         &none
&none  &bt BT_CLR  &none  &none  &none  &none    &none  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5
&none       &none  &none  &none  &none  &none    &none         &none         &none         &none         &none         &none
                          &none  &none  &none    &none         &none         &none
            >;
        };
    };
};
